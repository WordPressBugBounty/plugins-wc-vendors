function areObjectsEqual(t, i) {
  var a, e;
  return null === t ||
    null === i ||
    'object' != typeof t ||
    'object' != typeof i
    ? t === i
    : Array.isArray(t) && Array.isArray(i)
    ? t.length === i.length && t.every((a, t) => areObjectsEqual(a, i[t]))
    : Array.isArray(t) === Array.isArray(i) &&
      ((a = Object.keys(t)), (e = Object.keys(i)), a.length === e.length) &&
      a.every(
        a =>
          !!Object.prototype.hasOwnProperty.call(i, a) &&
          areObjectsEqual(t[a], i[a])
      );
}
jQuery(function(s) {
  s(document).ready(function() {
    s('select.variation_actions').select2({
      placeholder: wcv_product_variation.variation_actions_placeholder,
      allowClear: !0
    });
  });
  var i = {},
    e = {},
    o =
      (s('.wcv_variations', s('#wcv_variable_product_options')).sortable({
        items: '.wcv_variation',
        cursor: 'move',
        axis: 'y',
        handle: '.wcv-sort',
        scrollSensitivity: 40,
        forcePlaceholderSize: !0,
        helper: 'clone',
        opacity: 0.65,
        stop: function() {
          r.variation_row_indexes();
        }
      }),
      new Event('open_variations')),
    c = function(a, t, i, e) {
      var e = 'attribute_' + a + '[' + e + ']',
        o = 'variation_attribute ' + a,
        n = s('<select></select>')
          .attr('name', e)
          .attr('class', o)
          .data('taxonomy', a);
      return (
        n.append(
          '<option value="">' +
            wcv_product_variation.i18n_any_label +
            ' ' +
            i +
            '</option>'
        ),
        s.each(t, function(a, t) {
          n.append('<option value="' + a + '">' + t + '</option>');
        }),
        n
      );
    },
    n = function(a, t, i) {
      var e = 'default_attribute_' + a,
        o = 'defaut_attribute ' + a,
        n = s('<select></select>')
          .attr('name', e)
          .attr('class', o)
          .data('current', '')
          .data('taxonomy', a);
      return (
        n.append(
          '<option value="">' +
            wcv_product_variation.i18n_any_label +
            ' ' +
            i +
            '</option>'
        ),
        s.each(t, function(a, t) {
          n.append('<option value="' + a + '">' + t + '</option>');
        }),
        n
      );
    },
    l = function(a) {
      if (0 < a.length) {
        var t = a.val(),
          i = s('option', a),
          e = [];
        i.each(function() {
          e.push({ val: s(this).val(), text: s(this).text() });
        }),
          e.sort(function(a, t) {
            return a.val > t.val ? 1 : a.val == t.val ? 0 : -1;
          });
        for (var o = 0, n = e.length; o < n; o++)
          s(i[o])
            .val(e[o].val)
            .text(e[o].text);
        return a.val(t), a;
      }
    },
    v = function() {
      var i = s('#wcv-variation-attributes').data('variation_attr');
      s('.wcv_variation').each(function() {
        var a = s(this).find('select.variation_attribute');
        a.sort(function(a, t) {
          (a = i[s(a).data('taxonomy')].position),
            (t = i[s(t).data('taxonomy')].position);
          return t < a ? 1 : a < t ? -1 : 0;
        }),
          a.detach().appendTo(s(this).find('div.variations_wrapper'));
      });
    },
    d = function() {
      var i = s('#wcv-variation-attributes').data('variation_attr'),
        a = s('.variation-default-values').find('select.default_attribute');
      a.sort(function(a, t) {
        (a = i[s(a).data('taxonomy')].position),
          (t = i[s(t).data('taxonomy')].position);
        return t < a ? 1 : a < t ? -1 : 0;
      }),
        a.detach().appendTo('.variation-default-values');
    },
    r = {
      init: function() {
        s('#wcv_variable_product_options')
          .on(
            'change',
            'input.variable_is_downloadable',
            this.variable_is_downloadable
          )
          .on('change', 'input.variable_is_virtual', this.variable_is_virtual)
          .on(
            'change',
            'input.variable_manage_stock',
            this.variable_manage_stock
          )
          .on('click', 'button.notice-dismiss', this.notice_dismiss)
          .on('click', 'h5 .wcv-sort', this.set_menu_order)
          .on('reload', this.reload),
          s(
            'input.variable_is_downloadable, input.variable_is_virtual, input.variable_manage_stock'
          ).change(),
          s(document.body).on('wcv_variations_added', this.variation_added);
      },
      reload: function() {
        p.load_variations(1), this.variation_options;
      },
      variable_is_downloadable: function() {
        s(this)
          .closest('.wcv_variation')
          .find('.show_if_variation_downloadable')
          .hide(),
          s(this).is(':checked') &&
            (s(this)
              .closest('.wcv_variation')
              .find('.show_if_variation_downloadable')
              .show(),
            s(this)
              .closest('.wcv_variation')
              .height('auto'));
      },
      variable_is_virtual: function() {
        s(this)
          .closest('.wcv_variation')
          .find('.hide_if_variation_virtual')
          .show(),
          s(this).is(':checked') &&
            s(this)
              .closest('.wcv_variation')
              .find('.hide_if_variation_virtual')
              .hide();
      },
      variable_manage_stock: function() {
        s(this)
          .closest('.wcv_variation')
          .find('.show_if_variation_manage_stock')
          .hide(),
          s(this)
            .closest('.wcv_variation')
            .find('.hide_if_variation_manage_stock')
            .show(),
          s(this).is(':checked') &&
            (s(this)
              .closest('.wcv_variation')
              .find('.show_if_variation_manage_stock')
              .show(),
            s(this)
              .closest('.wcv_variation')
              .find('.hide_if_variation_manage_stock')
              .hide());
      },
      notice_dismiss: function() {
        s(this)
          .closest('div.notice')
          .remove();
      },
      update_input: function(a, t) {
        return s('.' + t).val(a), !1;
      },
      adjust_price: function(a, r, c) {
        return (
          s('.wcv_variation .' + a).each(function(a, t) {
            var i,
              e = 0,
              o = parseFloat(s(this).attr('value')),
              n = 0;
            (o.length <= 0 || isNaN(o)) && (o = 0),
              ((n =
                0 <= r.indexOf('%')
                  ? ((i =
                      ((e = parseFloat(r.replace('%', ''))) / 100) *
                      parseFloat(o)),
                    '+' == c ? parseFloat(o) + i : parseFloat(o) - i)
                  : ((e = parseFloat(r)),
                    '+' == c ? parseFloat(o) + e : parseFloat(o) - e)) < 0 ||
                isNaN(n)) &&
                (n = 0),
              s(this).attr('value', n);
          }),
          !1
        );
      },
      variations_loaded: function(a, t) {
        t = t || !1;
        var i = s('#wcv_variable_product_options');
        t ||
          (s(
            'input.variable_is_downloadable, input.variable_is_virtual, input.variable_manage_stock',
            i
          ).change(),
          s('.wcv_variation', i).each(function(a, t) {
            var t = s(t),
              i = s('.sale_price_dates_from', t).val(),
              e = s('.sale_price_dates_to', t).val();
            ('' === i && '' === e) || s('a.sale_schedule', t).click();
          })),
          s('.wcv_variations', i).sortable({
            items: '.wcv_variation',
            cursor: 'move',
            axis: 'y',
            handle: '.wcv-sort',
            scrollSensitivity: 40,
            forcePlaceholderSize: !0,
            helper: 'clone',
            opacity: 0.65,
            stop: function() {
              r.variation_row_indexes();
            }
          });
      },
      variation_added: function(a, t) {
        1 === t && r.variations_loaded(null, !0);
      },
      set_menu_order: function(a) {
        a.preventDefault();
        var a = s(this)
            .closest('.wcv_variation')
            .find('.variation_menu_order'),
          t = window.prompt(
            wcv_product_variation.i18n_enter_menu_order,
            a.val()
          );
        null != t && (a.val(parseInt(t, 10)).change(), p.save_variations());
      },
      variation_row_indexes: function() {
        var a = s('#wcv_variable_product_options').find('.wcv_variations'),
          a = parseInt(a.attr('data-page'), 10),
          i = parseInt((a - 1) * wcv_product_variation.variations_per_page, 10);
        s('.wcv_variations .wcv_variation').each(function(a, t) {
          s('.variation_menu_order', t)
            .val(
              parseInt(s(t).index('.wcv_variations .wcv_variation'), 10) + 1 + i
            )
            .change();
        });
      }
    },
    u = {
      setting_variation_image: null,
      mediaUploader: null,
      init: function() {
        s('#wcv_variable_product_options').on(
          'drop',
          '.wcv-upload-files-input',
          this.add_image
        ),
          s('#wcv_variable_product_options .wcv_remove').on(
            'click',
            this.remove_image
          ),
          s('#wcv_variable_product_options').on(
            'click',
            '.wcv-browser-file',
            this.add_image
          );
      },
      uploadImage: function(a) {
        var e = new FormData();
        e.append('action', 'upload-attachment'),
          e.append('async-upload', a),
          e.append(
            '_wpnonce',
            _wpPluploadSettings.defaults.multipart_params._wpnonce
          );
        let o;
        return new Promise((t, i) => {
          s.ajax({
            url: wcv_product_variation.ajax_url,
            type: 'POST',
            data: e,
            processData: !1,
            contentType: !1,
            dataType: 'json',
            async: !1,
            success: function(a) {
              a.success
                ? ((o = a.data.id), t(o))
                : (alert('Error uploading file'), i(a));
            },
            error: function(a) {
              alert('Error uploading file'), i(a);
            }
          });
        });
      },
      openMediaUploader: function(t) {
        u.mediaUploader ||
          ((u.mediaUploader = wp.media.frames.file_frame = wp.media({
            title: wcv_product_variation.i18n_choose_image,
            button: { text: wcv_product_variation.i18n_set_image },
            multiple: !1
          })),
          u.mediaUploader.on('select', function() {
            var a = u.mediaUploader
              .state()
              .get('selection')
              .first()
              .toJSON();
            t(a);
          })),
          u.mediaUploader.open();
      },
      add_image: function(a) {
        var i = s(this).closest('.upload_image'),
          e = i.find('.upload_image_id'),
          t = null,
          o = ((setting_variation_image = i), a.originalEvent.type);
        (t = 'drop' === o ? a.originalEvent.dataTransfer.files[0] : t)
          ? u
              .uploadImage(t)
              .then(t => {
                u.openMediaUploader(function(a) {
                  e.val(t),
                    i.find('img').attr('src', a.url),
                    i
                      .find('.product-variation-feat-upload ')
                      .addClass('hidden'),
                    i.find('.upload_image_button').removeClass('hide-all');
                });
              })
              .catch(a => {
                console.error(a);
              })
          : u.openMediaUploader(function(a) {
              e.val(a.id),
                i.find('img').attr('src', a.url),
                i.find('.product-variation-feat-upload ').addClass('hidden'),
                i.find('.upload_image_button').removeClass('hide-all');
            });
      },
      remove_image: function(a) {
        a.preventDefault();
        a = s(this).closest('.upload_image');
        a.find('.upload_image_id').val(''),
          a
            .find('img')
            .attr(
              'src',
              wcv_product_variation.wcv_woocommerce_placeholder_img_src
            ),
          a.find('.upload_image_button').addClass('hide-all'),
          a.find('.product-variation-feat-upload ').removeClass('hidden');
      },
      restore_wp_media_post_id: function() {
        wp.media.model.settings.post.id = s('#post_id').val();
      }
    },
    p = {
      addingPosition: 'top',
      init: function() {
        s('#wcv_variable_product_options').on(
          'click',
          '.remove_variation',
          this.remove_variation
        ),
          s(document.body)
            .on(
              'change',
              '#wcv_variable_product_options .wcv_variations :input',
              this.input_changed
            )
            .on('change', '.variations-defaults select', this.defaults_changed),
          s('.wcv-metaboxes-wrapper').on(
            'change',
            'select.variation_grouped_actions',
            function() {
              var a = s(this).attr('id');
              p.do_variation_action(a);
            }
          ),
          s('.wcv_single_add_variation').on('click', function() {
            s(this).hasClass('bottom')
              ? (p.addingPosition = 'bottom')
              : (p.addingPosition = 'top'),
              p.add_variation();
          }),
          s('.wcv-metaboxes-wrapper').on(
            'change',
            'select.variation_actions',
            function() {
              var a = s(this).attr('id');
              p.do_variation_action(a);
            }
          ),
          s(document).on('click', '.wcv-accordion-title', function() {
            'variations' === s(this).data('tab') &&
              p.check_for_attribute_changes();
          }),
          s(document.body).on(
            'woocommerce_added_attribute',
            p.check_for_attribute_changes
          ),
          s(document.body).on(
            'woocommerce_removed_attribute',
            p.check_for_attribute_changes
          ),
          s(document).ready(function() {
            s('#wcv-variation-attributes').data('variation_attr');
            s.isEmptyObject(e) &&
              (e = s.extend({}, wcv_product_variation.product_attrs));
          });
      },
      check_for_attribute_changes: function() {
        var a,
          i = s('#wcv-variation-attributes').data('variation_attr');
        areObjectsEqual((e = s.isEmptyObject(e) ? s.extend({}, i) : e), i) ||
          (areObjectsEqual(Object.keys(e), Object.keys(i))
            ? (v(), d())
            : Object.keys(e).length > Object.keys(i).length
            ? Object.keys(e).length == Object.keys(i).length
              ? s.each(e, function(a, t) {
                  t = _.omit(t.values, Object.keys(i[a].values));
                  s.isEmptyObject(t) ||
                    p.update_variations_ui(a, t, 'term', '-');
                })
              : ((a = _.omit(e, Object.keys(i))),
                s.each(a, function(a, t) {
                  p.update_variations_ui(a, t, 'attribute', '-'),
                    p.update_defaults_ui(a, t, 'attribute', '-');
                }))
            : Object.keys(e).length == Object.keys(i).length
            ? s.each(i, function(a, t) {
                t = _.omit(t.values, Object.keys(e[a].values));
                s.isEmptyObject(t) || p.update_variations_ui(a, t, 'term', '+');
              })
            : ((a = _.omit(i, Object.keys(e))),
              s.each(a, function(a, t) {
                p.update_variations_ui(a, t, 'attribute', '+'),
                  p.update_defaults_ui(a, t, 'attribute', '+');
              })),
          (e = jQuery.extend({}, i))),
          jQuery.isEmptyObject(i)
            ? (s('.variations-toolbar').hide(), s('.variations_notice').show())
            : (s('.variations-toolbar').show(), s('.variations_notice').hide()),
          p.check_total_variations(),
          document.dispatchEvent(o);
      },
      update_variations_ui: function(e, o, n, r) {
        var a = s('#wcv-variation-attributes').data('variation_attr');
        if ((p.block(), 0 === Object.keys(a).length))
          return (
            s('.wcv_variation').each(function() {
              s(this).remove();
            }),
            s('.wcv_variations')
              .attr('data-attributes', JSON.stringify(a))
              .attr('data-total', 0),
            s('.variations_notice').removeClass('hide-all'),
            s('#wcv-attr-message').removeClass('hide-all'),
            s('.wcv_single_add_variation').addClass('hide-all'),
            w.update_variations_count(0),
            p.unblock(),
            !1
          );
        s('.wcv_variation').each(function(a, t) {
          switch (n) {
            case 'attribute':
              var i;
              '-' == r
                ? s(this)
                    .find('select.' + e)
                    .remove()
                : ((i = c(e, o.values, o.label, a)),
                  s(this)
                    .find('.variation_title')
                    .append(i),
                  v(),
                  d());
              break;
            case 'term':
              if ('-' == r) {
                let i = s(this).find('select.' + e);
                s.each(o, function(a, t) {
                  i.find('[value="' + a + '"]').remove();
                });
              } else {
                let i = s(this).find('select.' + e);
                s.each(o, function(a, t) {
                  i.append(
                    s('<option></option>')
                      .attr('value', a)
                      .text(t)
                  );
                }),
                  (i = l(i));
              }
          }
        }),
          p.unblock();
      },
      update_defaults_ui: function(a, t, i, e) {
        switch (i) {
          case 'attribute':
            var o;
            '-' == e
              ? s('.variations-defaults')
                  .find('select.' + a)
                  .remove()
              : ((o = n(a, t.values, t.label)),
                s('.variation-default-values').append(o),
                v(),
                d());
            break;
          case 'term':
            if ('-' == e) {
              let i = s(this).find('select.' + a);
              s.each(t, function(a, t) {
                i.find('[value="' + a + '"]').remove();
              });
            } else {
              let i = s(this).find('select.' + a);
              s.each(t, function(a, t) {
                i.append(
                  s('<option></option>')
                    .attr('value', a)
                    .text(t)
                );
              }),
                (i = l(i));
            }
        }
      },
      check_total_variations: function() {
        return (
          0 == s('.wcv_variation').length && s('.variations-defaults').remove(),
          !1
        );
      },
      block: function() {
        s('#wcv_variable_product_options').block({
          message: null,
          overlayCSS: { background: '#fff', opacity: 0.6 }
        });
      },
      unblock: function() {
        s('#wcv_variable_product_options').unblock();
      },
      load_default_attributes: function() {
        var a;
        0 == s('.wcv_variation').length &&
          ((a = {
            action: 'wcv_json_default_variation_attributes',
            attributes: s('#wcv-variation-attributes').data('variation_attr'),
            security: wcv_product_variation.wcv_add_variation_nonce
          }),
          s.post(wcv_product_variation.ajax_url, a, function(a) {
            a = s(a);
            s('.toolbar-variations-defaults').prepend(a),
              s('.toolbar-variations-defaults').show();
          }));
      },
      add_variation: function() {
        p.block(), (i && 0 !== Object.keys(i).length) || p.populate_parent();
        var a = {
          action: 'wcv_json_add_variation',
          loop: s('.wcv_variation').length,
          parent_data: i,
          attributes: s('#wcv-variation-attributes').data('variation_attr'),
          security: wcv_product_variation.wcv_add_variation_nonce
        };
        return (
          s.post(wcv_product_variation.ajax_url, a, function(a) {
            var t = s(a);
            switch ((p.load_default_attributes(), p.addingPosition)) {
              case 'top':
                s('#wcv_variable_product_options')
                  .find('.wcv_variations')
                  .prepend(t);
                break;
              case 'bottom':
                s('#wcv_variable_product_options')
                  .find('.wcv_variations')
                  .append(t);
            }
            s('#wcv_variable_product_options').trigger(
              'wcv_variations_added',
              1
            ),
              s('.wcv_single_add_variation.bottom')
                .closest('.hide-all')
                .removeClass('hide-all'),
              p.unblock(),
              document.dispatchEvent(o);
          }),
          !1
        );
      },
      remove_variation: function() {
        var a, t, i;
        if (window.confirm(wcv_product_variation.i18n_remove_variation))
          return (
            (t = (a = s(this).closest('.wcv_variation')).attr('rel')),
            (i = a.data('loop')),
            a.remove(),
            p.add_deleted_variation(t, i),
            w.update_variations_count(-1),
            p.check_total_variations(),
            document.dispatchEvent(o),
            !1
          );
      },
      add_deleted_variation: function(a, t) {
        var i, e;
        if (0 != a)
          return (
            (i = s('#wcv_deleted_variations').data('variations')),
            (e = {}),
            jQuery.isEmptyObject(i) && (i = []),
            (e.loop = t),
            (e.id = a),
            i.push(e),
            s('#wcv_deleted_variations').data('variations', i),
            s('#wcv_deleted_variations').val(JSON.stringify(i)),
            !1
          );
      },
      delete_all_variations: function() {
        return (
          s('.wcv_variation').each(function() {
            var a = s(this).attr('rel'),
              t = s(this).data('loop');
            s(this).remove(),
              p.add_deleted_variation(a, t),
              w.update_variations_count(-1),
              p.check_total_variations();
          }),
          !1
        );
      },
      link_all_variations: function() {
        var e, t, a;
        if (window.confirm(wcv_product_variation.i18n_link_all_variations))
          return (
            p.block(),
            (e = []),
            (t = s('.wcv_variation').length),
            p.populate_parent(),
            s('.wcv_variation').each(function(a, t) {
              var i = {};
              if (
                s(this)
                  .find('.variation_attribute')
                  .filter(function() {
                    return '' === this.value;
                  }).length
              )
                return !0;
              s(this)
                .find('.variation_attribute')
                .each(function() {
                  i[
                    s(this)
                      .attr('name')
                      .split('[')[0]
                  ] = s(this).val();
                }),
                e.push(i);
            }),
            (a = {
              action: 'wcv_json_link_all_variations',
              parent_data: i,
              loop: s('.wcv_variation').length,
              attributes: s('#wcv-variation-attributes').data('variation_attr'),
              available_variations: e,
              security: wcv_product_variation.wcv_json_link_all_variations_nonce
            }),
            s.post(wcv_product_variation.ajax_url, a, function(a) {
              (a = s(a)),
                p.load_default_attributes(),
                s('#wcv_variable_product_options')
                  .find('.wcv_variations')
                  .prepend(a),
                (a = parseInt(s('.wcv_variation').length) - parseInt(t));
              1 == a
                ? window.alert(
                    a + ' ' + wcv_product_variation.i18n_variation_added
                  )
                : 0 == a || 1 < a
                ? window.alert(
                    a + ' ' + wcv_product_variation.i18n_variations_added
                  )
                : window.alert(wcv_product_variation.i18n_no_variations_added),
                w.update_variations_count(a),
                s('#wcv_variable_product_options').trigger(
                  'wcv_variations_added',
                  a
                ),
                p.unblock();
            }),
            !1
          );
      },
      input_changed: function() {
        s(this)
          .closest('.wcv_variation')
          .addClass('variation-needs-update'),
          s(
            'button.cancel-variation-changes, button.save-variation-changes'
          ).removeAttr('disabled'),
          s('#wcv_variable_product_options').trigger(
            'wcv_variations_input_changed'
          );
      },
      populate_parent: function() {
        (i.title = s('#post_title').val()),
          (i.sku = s('#_sku').val()),
          (i.weight = s('#_weight').val()),
          (i.length = s('#_length').val()),
          (i.width = s('#_width').val()),
          (i.height = s('#_height').val()),
          (i.tax_status = s('#_tax_status').val());
      },
      defaults_changed: function() {
        s(this)
          .closest('#wcv_variable_product_options')
          .find('.wcv_variation:first')
          .addClass('variation-needs-update'),
          s('#wcv_variable_product_options').trigger(
            'wcv_variations_defaults_changed'
          );
      },
      do_variation_action: function(a) {
        var t,
          i,
          e = s('#' + a).val();
        if ('-1' != e)
          switch ((p.populate_parent(), e)) {
            case 'add_variation':
              return void p.add_variation();
            case 'link_all_variations':
              return void p.link_all_variations();
            case 'delete_all':
              window.confirm(
                wcv_product_variation.i18n_delete_all_variations
              ) &&
                window.confirm(wcv_product_variation.i18n_last_warning) &&
                p.delete_all_variations();
              break;
            case 'toggle_variable_enabled':
            case 'toggle_variable_is_downloadable':
            case 'toggle_variable_is_virtual':
            case 'toggle_variable_manage_stock':
              var o = e.replace(/toggle_/, '');
              s('.' + o).prop('checked', !s('.' + o).prop('checked')),
                s('.' + o).trigger('change');
              break;
            case 'variable_regular_price_increase':
            case 'variable_regular_price_decrease':
            case 'variable_sale_price_increase':
            case 'variable_sale_price_decrease':
              (t = window.prompt(
                wcv_product_variation.i18n_enter_a_value_fixed_or_percent
              )) &&
                ((o = -1 < e.indexOf('increase') ? '+' : '-'),
                (i =
                  -1 < e.indexOf('increase')
                    ? e.substring(0, e.indexOf('_increase'))
                    : e.substring(0, e.indexOf('_decrease'))),
                null != t &&
                  (t =
                    0 <= t.indexOf('%')
                      ? accounting.unformat(
                          t.replace(/%/, ''),
                          wcv_product_variation.mon_decimal_point
                        ) + '%'
                      : accounting.unformat(
                          t,
                          wcv_product_variation.mon_decimal_point
                        )),
                r.adjust_price(i, String(t), o));
              break;
            case 'variable_regular_price':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_regular_price');
              break;
            case 'variable_sale_price':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_sale_price');
              break;
            case 'variable_stock':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_stock');
              break;
            case 'variable_weight':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_weight');
              break;
            case 'variable_length':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_length');
              break;
            case 'variable_width':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_width');
              break;
            case 'variable_height':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_height');
              break;
            case 'variable_download_limit':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_download_limit');
              break;
            case 'variable_download_expiry':
              (t = window.prompt(wcv_product_variation.i18n_enter_a_value)),
                r.update_input(t, 'variable_download_expiry');
              break;
            case 'variable_sale_schedule':
              (date_from = window.prompt(
                wcv_product_variation.i18n_scheduled_sale_start
              )),
                (date_to = window.prompt(
                  wcv_product_variation.i18n_scheduled_sale_end
                )),
                null === date_from && (date_from = !1),
                r.update_input(date_from, 'sale_price_dates_from'),
                null === date_to && (date_to = !1),
                r.update_input(date_to, 'sale_price_dates_to');
              break;
            default:
              s('select#' + a).trigger(e),
                s('select#' + a).triggerHandler(e + '_ajax_data', {});
          }
      }
    },
    w = {
      init: function() {
        s(document.body).on(
          'wcv_variations_added',
          this.update_single_quantity
        );
      },
      update_variations_count: function(a) {
        var t = s('#wcv_variable_product_options').find('.wcv_variations'),
          a = parseInt(t.attr('data-total'), 10) + a,
          i = s('.variations-pagenav .displaying-num');
        return (
          t.attr('data-total', a),
          1 === a
            ? i.text(
                wcv_product_variation.i18n_variation_count_single.replace(
                  '%qty%',
                  a
                )
              )
            : i.text(
                wcv_product_variation.i18n_variation_count_plural.replace(
                  '%qty%',
                  a
                )
              ),
          a
        );
      },
      update_single_quantity: function(a, t) {
        var i;
        1 === t &&
          ((i = s('.variations-pagenav')),
          w.update_variations_count(t),
          i.is(':hidden')) &&
          (s('option, optgroup', '.variation_actions').show(),
          s('.variation_actions').val('add_variation'),
          s('#wcv_variable_product_options')
            .find('.toolbar')
            .show(),
          i.show(),
          s('.pagination-links', i).hide());
      }
    },
    a =
      (s('.wcv_product_variations')
        .on('click', '.variation_title', function(a) {
          s(a.target).filter(':input, option, .wcv-sort').length ||
            (s(this)
              .closest('.wcv_variation')
              .find('.wcv-metabox-content')
              .stop()
              .slideToggle(),
            s(this)
              .closest('.wcv_variation')
              .toggleClass('closed'));
        })
        .on('click', '.expand_all', function() {
          return (
            s(this)
              .closest('.wcv-metaboxes-wrapper')
              .find('.wcv-metabox > .wcv-metabox-content')
              .show(),
            s(this)
              .closest('.wcv-metaboxes-wrapper')
              .find('.wcv_variation')
              .removeClass('closed'),
            !1
          );
        })
        .on('click', '.close_all', function() {
          return (
            s(this)
              .closest('.wcv-metaboxes-wrapper')
              .find('.wcv-metabox > .wcv-metabox-content')
              .hide(),
            s(this)
              .closest('.wcv-metaboxes-wrapper')
              .find('.wcv_variation')
              .addClass('closed'),
            !1
          );
        }),
      s('.wcv_product_variations').on(
        'click',
        '.downloadable_files a.insert',
        function() {
          return (
            s(this)
              .closest('.downloadable_files')
              .find('tbody')
              .append(s(this).data('row')),
            !1
          );
        }
      ),
      s('.wcv_product_variations').on(
        'click',
        '.downloadable_files a.delete',
        function() {
          return (
            s(this)
              .closest('tr')
              .remove(),
            !1
          );
        }
      ),
      s('.wcv_product_variations').on('click', '.sale_schedule', function() {
        return (
          s('.sale_price_dates_fields').show(),
          s(this).hide(),
          s('.cancel_sale_schedule').show(),
          !1
        );
      }),
      s('.wcv_product_variations').on(
        'click',
        '.cancel_sale_schedule',
        function() {
          return (
            s('.sale_price_dates_fields').hide(),
            s(this).hide(),
            s('.sale_schedule').show(),
            !1
          );
        }
      ),
      s('#show_variation_actions').on('click', function(a) {
        var t = s('#variation_actions_single');
        t.toggleClass('hide-all');
        let i = 90;
        (i = t.hasClass('hide-all') ? 0 : 90),
          s(this)
            .find('.wcv-icon')
            .css('transform', 'rotate(' + i + 'deg)'),
          a.preventDefault();
      }),
      r.init(),
      u.init(),
      p.init(),
      w.init(),
      () => {
        document.querySelectorAll('.variation_title').forEach(a => {
          a = a.querySelector('.variations_wrapper');
          1 < a.childElementCount
            ? a.classList.add('order')
            : a.classList.remove('order');
        });
      });
  document.querySelector('.variation_title') && a(),
    document.addEventListener('open_variations', a);
});
